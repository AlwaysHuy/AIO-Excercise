# -*- coding: utf-8 -*-
"""Module2-BTweek1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X_QGVWFy4U3TMZLbLaF8UeL-b0w6wxAh
"""

import numpy as np
arr = np.arange(0,10,1)
print(arr)

#arr = np.ones((3,3)) > 0
  #arr = np.ones((3,3), dtype = bool)
  #arr= np.full((3,3),fill_value = True, dtype = bool)
  print(arr)

arr = np.arange(0,10)
arr[arr%2 == 1] = -1
print(arr)

arr = np.arange(10)
arr_2d = arr.reshape(2,-1)
print(arr_2d)

arr1 = np.arange(10).reshape(2,-1)
arr2 = np.repeat(1,10).reshape(2,-1)
c = np.concatenate((arr1,arr2), axis = 0)
print(c)

arr1 = np.arange(10).reshape(2,-1)
arr2 = np.repeat(1,10).reshape(2,-1)
c = np.concatenate((arr1,arr2), axis = 1)
print(c)

arr = np.array([1,2,3])
print(np.repeat(arr,3))
print(np.tile(arr,3))

a = np.array([2 ,6 ,1 ,9 ,10 ,3 ,27])
index = np.where((a >=5) &(a <=10))
print (" result ", a [ index ])

def maxx(x,y):
  if x>=y :
    return x
  else :
    return y
a = np.array([5,7,9,8,6,4,5])
b = np.array([6,3,4,8,9,7,1])
pair_max = np.vectorize(maxx,otypes = [float])
pair_max(a,b)

a = np.array ([ 5 , 7 , 9 , 8, 6 ,4 ,5])
b = np.array ([6,3,4,8,9,7,1])
c = np.where(a<b, b, a )
print(c)

!gdown 1i9dqan21DjQoG5Q_VEvm0LrVwAlXD0vB

!gdown 1i9dqan21DjQoG5Q_VEvm0LrVwAlXD0vB
import matplotlib . image as mpimg
img = mpimg . imread ('/content/dog.jpeg')
def rgb2gray_lightness(rgb):
    max_rgb = np.max(rgb[..., :3], axis=2)
    min_rgb = np.min(rgb[..., :3], axis=2)
    return (max_rgb + min_rgb) / 2
gray_img_01 = rgb2gray_lightness(img)
gray_img_01 [0][0]

def rgb2gray_average(rgb):
    # Tính giá trị trung bình của ba kênh màu (R, G, B)
    return np.mean(rgb[..., :3], axis=2)
gray_img_02 = rgb2gray_average(img)
gray_img_02 [0][0]

"""# Mục mới"""

import numpy as np

def rgb2gray_luminosity(rgb):
    return np.dot(rgb[...,:3], [0.21, 0.72, 0.07])

gray_img_03 = rgb2gray_luminosity(img)
gray_img_03 [0][0]

! gdown 1iA0WmVfW88HyJvTBSQDI5vesf-pgKabq

import pandas as pd
df = pd.read_csv('/content/advertising.csv')
data = df.to_numpy()
sales_column = df['Sales']
max_value = sales_column.max()
max_index = sales_column.idxmax()
print(max_index)
print(max_value)

# Lọc các bản ghi có giá trị tại cột "Sales" lớn hơn hoặc bằng 20
filtered_sales = df[df['Sales'] >= 20]
# Đếm số lượng bản ghi thỏa mãn điều kiện
count = filtered_sales.shape[0]
print("Số lượng bản ghi có giá trị tại cột 'Sales' lớn hơn hoặc bằng 20 là:", count)

# Tính giá trị trung bình của cột "TV"
mean_tv = df['TV'].mean()
print("Giá trị trung bình của cột 'TV' là:", mean_tv)

# Lọc các bản ghi có giá trị tại cột "Sales" lớn hơn hoặc bằng 15
filtered_sales = df[df['Sales'] >= 15]
# Tính giá trị trung bình của cột "Radio" cho các bản ghi thỏa mãn điều kiện
mean_radio = filtered_sales['Radio'].mean()

print("Giá trị trung bình của cột 'Radio' khi 'Sales' lớn hơn hoặc bằng 15 là:", mean_radio)

# Tính giá trị trung bình của cột "Newspaper"
mean_newspaper = df['Newspaper'].mean()

# Lọc các bản ghi có giá trị tại cột "Newspaper" lớn hơn giá trị trung bình
filtered_df = df[df['Newspaper'] > mean_newspaper]

# Tính tổng các giá trị của cột "Sales" cho các bản ghi thỏa mãn điều kiện
total_sales = filtered_df['Sales'].sum()

print("Tổng các giá trị của cột 'Sales' với điều kiện 'Newspaper' lớn hơn giá trị trung bình là:", total_sales)

# Tính giá trị trung bình của cột "Sales"
A = df['Sales'].mean()

# Tạo mảng scores dựa trên giá trị của cột "Sales"
scores = df['Sales'].apply(lambda x: 'Good' if x > A else ('Bad' if x < A else 'Average')).to_numpy()

# In ra kết quả scores[7:10]
print(scores[7:10])

# Tính giá trị trung bình của cột "Sales"
A = df['Sales'].mean()

# Tạo mảng scores dựa trên giá trị của cột "Sales"
scores = df['Sales'].apply(lambda x: 'Good' if x > A else ('Bad' if x < A else 'Average')).to_numpy()

# In ra kết quả scores[7:10]
print(scores[7:10])

# Tính giá trị trung bình của cột "Sales"
mean_sales = df['Sales'].mean()

# Tìm giá trị gần nhất với giá trị trung bình
A = df['Sales'].iloc[(df['Sales'] - mean_sales).abs().argmin()]

print("Giá trị gần nhất với giá trị trung bình của cột 'Sales' là:", A)
# Tạo mảng scores dựa trên giá trị của cột "Sales"
scores = df['Sales'].apply(lambda x: 'Good' if x > A else ('Bad' if x < A else 'Average')).to_numpy()

# In ra kết quả scores[7:10]
print(scores[7:10])

